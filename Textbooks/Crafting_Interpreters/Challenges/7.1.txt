-------------------------------------------------------
Would you extend Lox to support comparing other types?
-------------------------------------------------------
Yes, but only between two of the same type.  Completely heterogenous comparisons make little sense to me (it almost certainly should be an error to do so, since it's almost certainly an error in the programmer's thinking), and it is entirely unclear how they should be compared.  There is no clear logical solution to it to my mind.  Unless perhaps a method is provided explicitly to compare a type against a different type - then it is up to the programmer themselves to define and specify the correct ordering.

-------------------------------------------------------------------------------
If so, which pairs of types do you allow and how do you define their ordering?
-------------------------------------------------------------------------------
In general, only types which are the same concrete type.  I can certainly see an argument for enabling the specification of a comparison function in an interface though, meaning that different implementors of the same interface, even if they are of different underlying concrete types, could still be compared reasonably.

---------------------------------------------------------
Justify your choices and compare them to other languages.
---------------------------------------------------------

There are two main grounds for my choice:  1)  It is entirely unclear to me how one would define a meaningful and sensible global comparator; and, 2)  Comparing wholly different types is almost invariably a bug.  Better that programmers are informed of the type discontinuity, than have incredibly bizarre behaviour at runtime.

It is notable, however, that F# permits comparisons between different members of the same discriminated union (I believe it is written into the spec).  Those declared first in the DU's declaration are considered less-than to those specified later, while the same type uses the normal comparison system.  Used carefully, it enables well-specified comparisons between semi-homogeneous types.